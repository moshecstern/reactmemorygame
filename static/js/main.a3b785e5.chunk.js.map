{"version":3,"sources":["components/Wrapper/index.js","components/SuperheroCard/index.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","SuperheroCard","onClick","ClickedImage","id","src","image","alt","name","Navbar","count","highcount","counter","App","state","Score","HighScore","CounterState","NewSuperheros","Superheros","shuffle","includes","setState","console","log","push","sort","a","b","Math","random","resetGame","boolean","alert","this","map","item","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"47FAaeA,MAVf,SAAiBC,GACf,OAAO,6BACL,yBAAKC,UAAU,eACZ,wBAAIA,UAAU,SAAd,2BACA,8FAEH,yBAAKA,UAAU,eAAeD,EAAME,UAL/B,M,MCUMC,MATf,SAAuBH,GACrB,OACE,yBAAKC,UAAU,YACb,yBAAKG,QAAS,kBAAKJ,EAAMK,aAAaL,EAAMM,KAAKC,IAAKP,EAAMQ,MAAOC,IAAKT,EAAMU,KAAMT,UAAU,6BCUrFU,MAff,SAAgBX,GAER,OACI,yBAAKC,UAAU,kBACX,wBAAIA,UAAU,OACV,wBAAIA,UAAU,YAAd,eACA,wBAAIA,UAAU,YAAd,4BACA,wBAAIA,UAAU,YAAd,UAAiCD,EAAMY,MAAvC,iBAA4DZ,EAAMa,UAAlE,Q,OCFhBC,EAAU,EAsLCC,E,2MAnLbC,MAAQ,CACNC,MAAO,EACPC,UAAW,EACXC,aAAc,EACdC,cAAe,GACfC,WAAYA,G,EAKdhB,aAAe,SAAAC,GAAO,IACZc,EAAkB,EAAKJ,MAAvBI,cAGR,EAAKE,UACDF,EAAcG,SAASjB,GACzB,EAAKkB,SAAS,CAACP,MAAO,IAMdG,EAAcG,SAASjB,KAC/BQ,EAAUA,GAAW,EACrBW,QAAQC,IAAIZ,GAGZ,EAAKU,SAAS,CAAEP,MAAOH,IACpB,EAAKE,MAAMC,MAAQ,EAAKD,MAAME,WAC/B,EAAKM,SAAS,CAACN,UAAW,EAAKF,MAAMC,QAIvCG,EAAcO,KAAKrB,K,EAqFvBgB,QAAU,WACR,EAAKN,MAAMK,WAAWO,MAAK,SAAUC,EAAGC,GAAK,MAAO,GAAMC,KAAKC,a,EAIjEC,UAAY,SAAAC,GACV,IAAgB,IAAZA,EAYF,OANA,EAAKZ,UACLa,MAAM,aACN,EAAKX,SAAS,CACZP,MAAO,EACPI,WAAY,KAEP,EAAKG,SAAS,CACnBH,WAAYA,IAUd,EAAKC,W,wEAMC,IAAD,OAEP,OACE,6BACE,kBAAC,EAAD,CAAQV,MAAOwB,KAAKpB,MAAMC,MAAOJ,UAAWuB,KAAKpB,MAAME,YACvD,kBAAC,EAAD,KAGGkB,KAAKpB,MAAMK,WAAWgB,KAAI,SAACC,GAAD,OAGzB,kBAAC,EAAD,CACEC,IAAKD,EAAKhC,GACVA,GAAIgC,EAAKhC,GACTI,KAAM4B,EAAK5B,KACXF,MAAO8B,EAAK9B,MACZH,aAAc,kBAAM,EAAKA,aAAaiC,EAAKhC,gB,GA1KvCkC,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a3b785e5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div>\n    <div className=\"row wrapper\">\n       <h1 className=\"title\">Superhero Guessing Game</h1>\n       <h3>Click an image to earn points, but don't click an image twice</h3>\n      </div>\n    <div className=\"wrapper row\">{props.children}</div>;\n  </div>\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction SuperheroCard(props) {\n  return (\n    <div className=\"col-md-3\">\n      <img onClick={() =>props.ClickedImage(props.id)} src={props.image} alt={props.name} className=\"img-thumbnail hero-img\"/>\n    </div>\n\n  );\n}\n\nexport default SuperheroCard;\n","import React from \"react\";\n\n// By extending the React.Component class, Navbar inherits functionality from it\nfunction Navbar(props) {\n\n        return (\n            <nav className=\"navbar d-block\">\n                <ul className=\"row\">\n                    <li className=\"col-md-4\">Clicky Game</li>\n                    <li className=\"col-md-4\">Click an Image to Begin!</li>\n                    <li className=\"col-md-4\">Score: {props.count}||High Score: {props.highcount} </li>\n                </ul>\n             \n            </nav>\n        );\n    }\n\n\nexport default Navbar;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport SuperheroCard from \"./components/SuperheroCard\";\nimport Navbar from \"./components/Navbar\";\nimport Superheros from \"./superheros.json\";\n\nlet counter = 0;\n\nclass App extends React.Component {\n  state = {\n    Score: 0,\n    HighScore: 0,\n    CounterState: 0,\n    NewSuperheros: [],\n    Superheros: Superheros\n  }\n\n  \n\n  ClickedImage = id => {\n    const { NewSuperheros } = this.state;\n    // console.log(id)\n\n    this.shuffle();\n    if (NewSuperheros.includes(id)) {\n      this.setState({Score: 0})\n      \n      //logic for couter\n      // this.setState({ HighScore: this.state.Score})\n      // this.setState({ Score: })\n    }\n    else if (!NewSuperheros.includes(id)) {\n      counter = counter += 1;\n      console.log(counter);\n      // this.state({ CounterState: counter})\n      // this.setState({ HighScore: counter})\n      this.setState({ Score: counter})\n      if(this.state.Score > this.state.HighScore){\n        this.setState({HighScore: this.state.Score})\n      }\n      \n      \n      NewSuperheros.push(id);\n      //logic for counter\n    }\n    // const uniqueNames = names.filter((val, id, array) => {\n    //   return array.indexOf(val) == id;  \n    //  });\n    // const NewSuperheros = this.state.Superheros;\n    // const NewSuperheros = this.state.Superheros.map(pic => {\n    //   if (pic.id === id) {\n    //     if (!pic.clicked) {\n    //       pic.clicked = true\n    //       this.updateScore(true)\n    //       this.UpdateHighScore();\n\n          // this.shuffle()\n          // this.setState({\n          //   Score: this.state.Score+1\n          // });\n          // update the top score if score is greater than top score\n          // if the score is equal to 12 you win!!!\n          // then reset game but do not reset top score\n        // } else {\n          // Now reset the game\n          // pic.clicked = false\n\n          // this.updateScore(false)\n          // this.UpdateHighScore()\n          // this.resetGame(true);\n          // return !pic;\n\n          // this.setState({\n          //   // Score: 0,\n          //   Superheros: Superheros\n          // });\n          // alert(\"You lose!\");\n    //     }\n    //   }\n    //   console.log(\"********\")\n    //   console.log(pic);\n    //   console.log(\"********\")\n    //   return pic;\n\n    // });\n\n    // if (pic.id === id){\n\n    // this.setState({\n    //   Superheros: NewSuperheros\n    // })\n    // console.log(\"adding/ setting NewSuperheros to Superheros; line62\")\n    // // }else{\n    //   this.setState({\n    //     Superheros: Superheros\n    //   })\n    // }\n\n  }\n  // end of on click image\n\n  // updatehighscore function\n  // UpdateHighScore = () => {\n  //   if (this.state.Score === 12) {\n  //     alert(\"You win\");\n  //     // reset game function\n  //     this.resetGame(false)\n  //   } else if (this.state.Score > this.state.HighScore) {\n  //     this.setState({\n  //       HighScore: this.state.Score\n  //     })\n  //     // this.resetGame(false)\n  //   }\n  // }\n  // updateScore = (boolean) => {\n  //   if (boolean === true) {\n  //     return this.setState({\n  //       Score: this.state.Score + 1,\n  //     });\n  //   } else if (boolean === false) {\n  //     return this.setState({\n  //       Score: 0,\n  //     })\n  //   }\n  // } // end of updatescore func\n\n  //shuffle board function\n  shuffle = () => {\n    this.state.Superheros.sort(function (a, b) { return 0.5 - Math.random() });\n    // this.state.Superheros.sort(() => Math.random() - 3.33)\n  }\n  //reset game function\n  resetGame = boolean => {\n    if (boolean === true) {\n      // reset entire game and set score to 0 and call state superheros: superheros\n      // shuffleboard\n      // this.state.Superheros.forEach(pic => {\n      //   pic.clicked = false;\n      // });\n      this.shuffle()\n      alert(\"You lose!\")\n      this.setState({\n        Score: 0,\n        Superheros: []\n      })\n      return this.setState({\n        Superheros: Superheros\n      })\n      // console.log(\"making Superheros: superheros; line 124\")\n    } else {\n      // shuffle board\n      // this.setState({\n      //   Superheros: Superheros\n      // })\n      // console.log(\"making Superheros: superheros; line 130\")\n\n      this.shuffle()\n    }\n  }\n\n\n\n  render() {\n\n    return (\n      <div>\n        <Navbar count={this.state.Score} highcount={this.state.HighScore} />\n        <Wrapper>\n\n\n          {this.state.Superheros.map((item) => (\n            // {this.state.NewSuperheros.map((item, id) =>\n\n            <SuperheroCard\n              key={item.id}\n              id={item.id}\n              name={item.name}\n              image={item.image}\n              ClickedImage={() => this.ClickedImage(item.id)}\n            />\n          ))}\n\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}