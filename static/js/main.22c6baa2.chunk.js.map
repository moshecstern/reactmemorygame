{"version":3,"sources":["components/Wrapper/index.js","components/SuperheroCard/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","SuperheroCard","onClick","ClickedImage","id","src","image","alt","name","Navbar","message","count","highcount","App","state","Score","HighScore","NewSuperheros","Superheros","includes","shuffle","resetGame","setState","console","log","this","push","sort","Math","random","booleam","map","item","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gsEAaeA,MAVf,SAAiBC,GACf,OAAO,6BACL,yBAAKC,UAAU,eACZ,wBAAIA,UAAU,SAAd,2BACA,8FAEH,yBAAKA,UAAU,eAAeD,EAAME,UAL/B,M,MCUMC,MATf,SAAuBH,GACrB,OACE,yBAAKC,UAAU,YACb,yBAAKG,QAAS,kBAAKJ,EAAMK,aAAaL,EAAMM,KAAKC,IAAKP,EAAMQ,MAAOC,IAAKT,EAAMU,KAAMT,UAAU,6BCWrFU,MAff,SAAgBX,GAER,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YAAf,yBACA,yBAAKA,UAAU,YAAYD,EAAMY,SAChC,yBAAKX,UAAU,YAAf,UAAkCD,EAAMa,MAAxC,iBAA6Db,EAAMc,c,OCkFzEC,E,2MAlFbC,MAAQ,CACNC,MAAO,EACPC,UAAW,EACXN,QAAS,oCACTO,cAAe,GACfC,WAAYA,G,EAIdf,aAAe,SAAAC,GAAO,IACZa,EAAkB,EAAKH,MAAvBG,cACJA,EAAcE,SAASf,IACzB,EAAKgB,UACL,EAAKC,WAAU,IAEPJ,EAAcE,SAASf,KAC/B,EAAKgB,UACL,EAAKE,SAAS,CAAEP,MAAO,EAAKD,MAAMC,MAAQ,IAAK,WAC7CQ,QAAQC,IAAI,6BAA+BC,KAAKX,MAAMC,OAClDU,KAAKX,MAAMC,MAAQU,KAAKX,MAAME,WAChCS,KAAKH,SAAS,CAAEN,UAAWS,KAAKX,MAAMC,QAAS,WACpB,KAArBU,KAAKX,MAAMC,QACbU,KAAKJ,WAAU,GAEfE,QAAQC,IAAI,4BAKpBP,EAAcS,KAAKtB,K,EAKvBgB,QAAU,WACR,EAAKN,MAAMI,WAAWS,MAAK,WAAc,MAAO,GAAMC,KAAKC,a,EAG7DR,UAAY,SAACS,GACNA,EAMGA,GACR,EAAKR,SAAS,CACZP,MAAO,EACPE,cAAe,GACfD,UAAW,EACXN,QAAS,sBAVX,EAAKY,SAAS,CACZP,MAAO,EACPE,cAAe,GACfP,QAAS,8B,wEAaH,IAAD,OAEP,OACE,6BACE,kBAAC,EAAD,CAAQC,MAAOc,KAAKX,MAAMC,MAAOH,UAAWa,KAAKX,MAAME,UAAWN,QAASe,KAAKX,MAAMJ,UACtF,kBAAC,EAAD,KAGGe,KAAKX,MAAMI,WAAWa,KAAI,SAACC,GAAD,OAGzB,kBAAC,EAAD,CACEC,IAAKD,EAAK5B,GACVA,GAAI4B,EAAK5B,GAETE,MAAO0B,EAAK1B,MACZH,aAAc,kBAAM,EAAKA,aAAa6B,EAAK5B,gB,GAzEvC8B,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.22c6baa2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div>\n    <div className=\"row wrapper\">\n       <h1 className=\"title\">Superhero Guessing Game</h1>\n       <h3>Click an image to earn points, but don't click an image twice</h3>\n      </div>\n    <div className=\"wrapper row\">{props.children}</div>;\n  </div>\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction SuperheroCard(props) {\n  return (\n    <div className=\"col-md-3\">\n      <img onClick={() =>props.ClickedImage(props.id)} src={props.image} alt={props.name} className=\"img-thumbnail hero-img\"/>\n    </div>\n\n  );\n}\n\nexport default SuperheroCard;\n","//changing this too!\nimport React from \"react\";\n\n// By extending the React.Component class, Navbar inherits functionality from it\nfunction Navbar(props) {\n\n        return (\n            <nav className=\"navbar d-block\">\n                <div className=\"row\">\n                    <div className=\"col-md-4\">Superhero Clicky Game</div>\n                    <div className=\"col-md-4\">{props.message}</div>\n                     <div className=\"col-md-4\">Score: {props.count}||High Score: {props.highcount}</div>\n                </div>\n             \n            </nav>\n        );\n    }\n\n\nexport default Navbar;","//  computer crashed, trying to get this code in\nimport React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport SuperheroCard from \"./components/SuperheroCard\";\nimport Navbar from \"./components/Navbar\";\nimport Superheros from \"./superheros.json\";\n// import Counter from './components/Counter/Counter';\n\nclass App extends React.Component {\n  state = {\n    Score: 0,\n    HighScore: 0,\n    message: \"Click a Superhero to get started!\",\n    NewSuperheros: [],\n    Superheros: Superheros\n  }\n\n\n  ClickedImage = id => {\n    const { NewSuperheros } = this.state;\n    if (NewSuperheros.includes(id)) {\n      this.shuffle();\n      this.resetGame(false);\n    }\n    else if (!NewSuperheros.includes(id)) {\n      this.shuffle();\n      this.setState({ Score: this.state.Score + 1 }, function () {\n        console.log(\"line 51: the score now is \" + this.state.Score)\n        if (this.state.Score > this.state.HighScore) {\n          this.setState({ HighScore: this.state.Score }, function () {\n            if (this.state.Score === 12) {\n              this.resetGame(true);\n              // window.location.reload();\n              console.log(\"reset game damnit\")\n            }\n          })\n        }\n      })\n      NewSuperheros.push(id);\n    }\n  };\n\n\n  shuffle = () => {\n    this.state.Superheros.sort(function () { return 0.5 - Math.random() });\n  }\n  //reset game function\n  resetGame = (booleam) => {\n    if (!booleam){\n    this.setState({\n      Score: 0,\n      NewSuperheros: [],\n      message: \"OOO So close, try again!\"\n    })\n  }else if (booleam) {\n    this.setState({\n      Score: 0,\n      NewSuperheros: [],\n      HighScore: 0,\n      message: \"YAY YOU WIN!!!!!!\"\n    })\n  }\n  }\n\n\n  render() {\n\n    return (\n      <div>\n        <Navbar count={this.state.Score} highcount={this.state.HighScore} message={this.state.message}/>\n        <Wrapper>\n\n\n          {this.state.Superheros.map((item) => (\n            // {this.state.NewSuperheros.map((item, id) =>\n\n            <SuperheroCard\n              key={item.id}\n              id={item.id}\n              // name={item.name}\n              image={item.image}\n              ClickedImage={() => this.ClickedImage(item.id)}\n            />\n          ))}\n\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}